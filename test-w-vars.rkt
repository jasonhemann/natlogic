#lang racket
(require cKanren)
(require cKanren/tree-unify)
(require cKanren/attributes)
(require "w-vars.rkt")
(provide (all-defined-out))

(define-syntax test-check
  (syntax-rules ()
    ((_ title tested-expression expected-result)
     (begin
       (printf "Testing ~s\n" title)
       (let* ((expected expected-result)
              (produced tested-expression))
         (or (equal? expected produced)
             (error 'test-check
               "Failed: ~a~%Expected: ~a~%Computed: ~a~%"
               'tested-expression expected produced)))))))

(test-check "is a constant"
  (run* (q) (constanto q))
  '(((-1 . _.0) : (symbol _.0))))

(test-check "is an un-atom"
  (run* (q) (un-atomo q))
  '(((-2 . _.0) : (symbol _.0))))

(test-check "is a bin-atom"
  (run* (q) (bin-atomo q))
  '(((-3 . _.0) : (symbol _.0))))

(test-check "gen some set-terms"
  (run 15 (q) (set-termo q))
  '(((-2 . _.0) : (symbol _.0))
    ((not (-2 . _.0)) : (symbol _.0))
    ((exists (-2 . _.0) (-3 . _.1)) : (symbol _.0 _.1))
    ((forall (-2 . _.0) (-3 . _.1)) : (symbol _.0 _.1))
    ((exists (-2 . _.0) (not (-3 . _.1))) : (symbol _.0 _.1))
    ((forall (-2 . _.0) (not (-3 . _.1))) : (symbol _.0 _.1))
    ((exists (not (-2 . _.0)) (-3 . _.1)) : (symbol _.0 _.1))
    ((forall (not (-2 . _.0)) (-3 . _.1)) : (symbol _.0 _.1))
    ((exists (not (-2 . _.0)) (not (-3 . _.1))) : (symbol _.0 _.1))
    ((forall (not (-2 . _.0)) (not (-3 . _.1))) : (symbol _.0 _.1))
    ((exists (exists (-2 . _.0) (-3 . _.1)) (-3 . _.2)) : (symbol _.0 _.1 _.2))
    ((forall (exists (-2 . _.0) (-3 . _.1)) (-3 . _.2)) : (symbol _.0 _.1 _.2))
    ((exists (exists (-2 . _.0) (-3 . _.1)) (not (-3 . _.2))) : (symbol _.0 _.1 _.2))
    ((forall (exists (-2 . _.0) (-3 . _.1)) (not (-3 . _.2))) : (symbol _.0 _.1 _.2))
    ((exists (forall (-2 . _.0) (-3 . _.1)) (-3 . _.2)) : (symbol _.0 _.1 _.2))))

(test-check "generate 30 sentences"
  (run 30 (q) (sentenceo q))
  '(((exists (-2 . _.0) (-2 . _.1)) : (symbol _.0 _.1))
    ((exists (-2 . _.0) (not (-2 . _.1))) : (symbol _.0 _.1))
    ((exists (not (-2 . _.0)) (-2 . _.1)) : (symbol _.0 _.1))
    ((forall (-2 . _.0) (-2 . _.1)) : (symbol _.0 _.1))
    (((-2 . _.0) (-1 . _.1)) : (symbol _.0 _.1))
    ((exists (not (-2 . _.0)) (not (-2 . _.1))) : (symbol _.0 _.1))
    (((-3 . _.0) (-1 . _.1) (-1 . _.2)) : (symbol _.0 _.1 _.2))
    ((forall (-2 . _.0) (not (-2 . _.1))) : (symbol _.0 _.1))
    (((not (-3 . _.0)) (-1 . _.1) (-1 . _.2)) : (symbol _.0 _.1 _.2))
    (((not (-2 . _.0)) (-1 . _.1)) : (symbol _.0 _.1))
    ((exists (-2 . _.0) (exists (-2 . _.1) (-3 . _.2))) : (symbol _.0 _.1 _.2))
    ((exists (-2 . _.0) (forall (-2 . _.1) (-3 . _.2))) : (symbol _.0 _.1 _.2))
    ((forall (not (-2 . _.0)) (-2 . _.1)) : (symbol _.0 _.1))
    ((exists (-2 . _.0) (exists (-2 . _.1) (not (-3 . _.2)))) : (symbol _.0 _.1 _.2))
    ((exists (-2 . _.0) (forall (-2 . _.1) (not (-3 . _.2)))) : (symbol _.0 _.1 _.2))
    ((forall (not (-2 . _.0)) (not (-2 . _.1))) : (symbol _.0 _.1))
    ((exists (-2 . _.0) (exists (not (-2 . _.1)) (-3 . _.2))) : (symbol _.0 _.1 _.2))
    ((exists (-2 . _.0) (forall (not (-2 . _.1)) (-3 . _.2))) : (symbol _.0 _.1 _.2))
    (((exists (-2 . _.0) (-3 . _.1)) (-1 . _.2)) : (symbol _.0 _.1 _.2))
    (((forall (-2 . _.0) (-3 . _.1)) (-1 . _.2)) : (symbol _.0 _.1 _.2))
    ((exists (-2 . _.0) (exists (not (-2 . _.1)) (not (-3 . _.2)))) : (symbol _.0 _.1 _.2))
    ((exists (-2 . _.0) (forall (not (-2 . _.1)) (not (-3 . _.2)))) : (symbol _.0 _.1 _.2))
    (((exists (-2 . _.0) (not (-3 . _.1))) (-1 . _.2)) : (symbol _.0 _.1 _.2))
    (((forall (-2 . _.0) (not (-3 . _.1))) (-1 . _.2)) : (symbol _.0 _.1 _.2))
    ((exists (not (-2 . _.0)) (exists (-2 . _.1) (-3 . _.2))) : (symbol _.0 _.1 _.2))
    ((exists (not (-2 . _.0)) (forall (-2 . _.1) (-3 . _.2))) : (symbol _.0 _.1 _.2))
    ((forall (-2 . _.0) (exists (-2 . _.1) (-3 . _.2))) : (symbol _.0 _.1 _.2))
    (((exists (not (-2 . _.0)) (-3 . _.1)) (-1 . _.2)) : (symbol _.0 _.1 _.2))
    ((forall (-2 . _.0) (forall (-2 . _.1) (-3 . _.2))) : (symbol _.0 _.1 _.2))
    (((forall (not (-2 . _.0)) (-3 . _.1)) (-1 . _.2)) : (symbol _.0 _.1 _.2))))

(test-check "is a variable"
  (run* (q) (variableo q))
  '(((-4 . _.0) : (symbol _.0))))

(test-check "is an ind-term"
  (run* (q) (ind-termo q))
  '(((-4 . _.0) : (symbol _.0)) ((-1 . _.0) : (symbol _.0))))

(test-check "is bottom"
  (run* (q) (bottomo q))
  '((0 . 0)))

(test-check "bottom is bottom"
  (run* (q) (bottomo bottom))
  '(_.0))

(test-check "45 general sentences"
  (run 45 (q) (gen-sentenceo q))
  '((0 . 0)
    ((_.0 (-4 . _.1) (-4 . _.2)) : (symbol _.1 _.2))
    (((-2 . _.0) (-4 . _.1)) : (symbol _.0 _.1))
    (((not (-2 . _.0)) (-4 . _.1)) : (symbol _.0 _.1))
    (((exists (-2 . _.0) (-3 . _.1)) (-4 . _.2)) : (symbol _.0 _.1 _.2))
    (((forall (-2 . _.0) (-3 . _.1)) (-4 . _.2)) : (symbol _.0 _.1 _.2))
    ((exists (-2 . _.0) (-2 . _.1)) : (symbol _.0 _.1))
    (((exists (-2 . _.0) (not (-3 . _.1))) (-4 . _.2)) : (symbol _.0 _.1 _.2))
    (((forall (-2 . _.0) (not (-3 . _.1))) (-4 . _.2)) : (symbol _.0 _.1 _.2))
    ((exists (-2 . _.0) (not (-2 . _.1))) : (symbol _.0 _.1))
    (((exists (not (-2 . _.0)) (-3 . _.1)) (-4 . _.2)) : (symbol _.0 _.1 _.2))
    (((forall (not (-2 . _.0)) (-3 . _.1)) (-4 . _.2)) : (symbol _.0 _.1 _.2))
    (((exists (not (-2 . _.0)) (not (-3 . _.1))) (-4 . _.2)) : (symbol _.0 _.1 _.2))
    (((forall (not (-2 . _.0)) (not (-3 . _.1))) (-4 . _.2)) : (symbol _.0 _.1 _.2))
    ((exists (not (-2 . _.0)) (-2 . _.1)) : (symbol _.0 _.1))
    ((forall (-2 . _.0) (-2 . _.1)) : (symbol _.0 _.1))
    (((-2 . _.0) (-1 . _.1)) : (symbol _.0 _.1))
    ((exists (not (-2 . _.0)) (not (-2 . _.1))) : (symbol _.0 _.1))
    (((-3 . _.0) (-1 . _.1) (-1 . _.2)) : (symbol _.0 _.1 _.2))
    ((forall (-2 . _.0) (not (-2 . _.1))) : (symbol _.0 _.1))
    (((not (-3 . _.0)) (-1 . _.1) (-1 . _.2)) : (symbol _.0 _.1 _.2))
    (((not (-2 . _.0)) (-1 . _.1)) : (symbol _.0 _.1))
    (((exists (exists (-2 . _.0) (-3 . _.1)) (-3 . _.2)) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    (((forall (exists (-2 . _.0) (-3 . _.1)) (-3 . _.2)) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    (((exists (exists (-2 . _.0) (-3 . _.1)) (not (-3 . _.2))) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    (((forall (exists (-2 . _.0) (-3 . _.1)) (not (-3 . _.2))) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    (((exists (forall (-2 . _.0) (-3 . _.1)) (-3 . _.2)) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    (((forall (forall (-2 . _.0) (-3 . _.1)) (-3 . _.2)) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    ((exists (-2 . _.0) (exists (-2 . _.1) (-3 . _.2))) : (symbol _.0 _.1 _.2))
    (((exists (forall (-2 . _.0) (-3 . _.1)) (not (-3 . _.2))) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    ((exists (-2 . _.0) (forall (-2 . _.1) (-3 . _.2))) : (symbol _.0 _.1 _.2))
    ((forall (not (-2 . _.0)) (-2 . _.1)) : (symbol _.0 _.1))
    (((forall (forall (-2 . _.0) (-3 . _.1)) (not (-3 . _.2))) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    ((exists (-2 . _.0) (exists (-2 . _.1) (not (-3 . _.2)))) : (symbol _.0 _.1 _.2))
    (((exists (exists (-2 . _.0) (not (-3 . _.1))) (-3 . _.2)) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    ((exists (-2 . _.0) (forall (-2 . _.1) (not (-3 . _.2)))) : (symbol _.0 _.1 _.2))
    (((forall (exists (-2 . _.0) (not (-3 . _.1))) (-3 . _.2)) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    (((exists (exists (-2 . _.0) (not (-3 . _.1))) (not (-3 . _.2))) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    (((forall (exists (-2 . _.0) (not (-3 . _.1))) (not (-3 . _.2))) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    ((forall (not (-2 . _.0)) (not (-2 . _.1))) : (symbol _.0 _.1))
    (((exists (forall (-2 . _.0) (not (-3 . _.1))) (-3 . _.2)) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    (((forall (forall (-2 . _.0) (not (-3 . _.1))) (-3 . _.2)) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    (((exists (forall (-2 . _.0) (not (-3 . _.1))) (not (-3 . _.2))) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    (((forall (forall (-2 . _.0) (not (-3 . _.1))) (not (-3 . _.2))) (-4 . _.3)) : (symbol _.0 _.1 _.2 _.3))
    ((exists (-2 . _.0) (exists (not (-2 . _.1)) (-3 . _.2))) : (symbol _.0 _.1 _.2))))

(test-check "25 negateo"
  (run 25 (q) (fresh (a b) (negateo a b) (== `(,a ,b) q)))
  '((((-2 . _.0) (not (-2 . _.0))) : (symbol _.0))
    (((-3 . _.0) (not (-3 . _.0))) : (symbol _.0))
    (((not (-2 . _.0)) (-2 . _.0)) : (symbol _.0))
    (((not (-3 . _.0)) (-3 . _.0)) : (symbol _.0))
    (((exists (-2 . _.0) (-3 . _.1)) (forall (-2 . _.0) (not (-3 . _.1)))) : (symbol _.0 _.1))
    ((0 . 0) (not (0 . 0)))
    ((not (0 . 0)) (0 . 0))
    (((exists (not (-2 . _.0)) (-3 . _.1)) (forall (not (-2 . _.0)) (not (-3 . _.1)))) : (symbol _.0 _.1))
    (((exists (-2 . _.0) (not (-3 . _.1))) (forall (-2 . _.0) (-3 . _.1))) : (symbol _.0 _.1))
    (((forall (-2 . _.0) (-3 . _.1)) (exists (-2 . _.0) (not (-3 . _.1)))) : (symbol _.0 _.1))
    (((exists (not (-2 . _.0)) (not (-3 . _.1))) (forall (not (-2 . _.0)) (-3 . _.1))) : (symbol _.0 _.1))
    (((forall (not (-2 . _.0)) (-3 . _.1)) (exists (not (-2 . _.0)) (not (-3 . _.1)))) : (symbol _.0 _.1))
    (((forall (-2 . _.0) (not (-3 . _.1))) (exists (-2 . _.0) (-3 . _.1))) : (symbol _.0 _.1))
    (((forall (not (-2 . _.0)) (not (-3 . _.1))) (exists (not (-2 . _.0)) (-3 . _.1))) : (symbol _.0 _.1))
    (((exists (-2 . _.0) (-2 . _.1)) (forall (-2 . _.0) (not (-2 . _.1)))) : (symbol _.0 _.1))
    (((exists (not (-2 . _.0)) (-2 . _.1)) (forall (not (-2 . _.0)) (not (-2 . _.1)))) : (symbol _.0 _.1))
    (((forall (-2 . _.0) (-2 . _.1)) (exists (-2 . _.0) (not (-2 . _.1)))) : (symbol _.0 _.1))
    (((exists (-2 . _.0) (not (-2 . _.1))) (forall (-2 . _.0) (-2 . _.1))) : (symbol _.0 _.1))
    (((exists (not (-2 . _.0)) (not (-2 . _.1))) (forall (not (-2 . _.0)) (-2 . _.1))) : (symbol _.0 _.1))
    (((forall (not (-2 . _.0)) (-2 . _.1)) (exists (not (-2 . _.0)) (not (-2 . _.1)))) : (symbol _.0 _.1))
    (((exists (exists (-2 . _.0) (-3 . _.1)) (-2 . _.2)) (forall (exists (-2 . _.0) (-3 . _.1)) (not (-2 . _.2)))) : (symbol _.0 _.1 _.2))
    ((((-3 . _.0) (-4 . _.1) (-4 . _.2)) ((not (-3 . _.0)) (-4 . _.1) (-4 . _.2))) : (symbol _.0 _.1 _.2))
    ((((-2 . _.0) (-4 . _.1)) ((not (-2 . _.0)) (-4 . _.1))) : (symbol _.0 _.1))
    (((exists (forall (-2 . _.0) (-3 . _.1)) (-2 . _.2)) (forall (forall (-2 . _.0) (-3 . _.1)) (not (-2 . _.2)))) : (symbol _.0 _.1 _.2))
    (((exists (exists (-2 . _.0) (not (-3 . _.1))) (-2 . _.2)) (forall (exists (-2 . _.0) (not (-3 . _.1))) (not (-2 . _.2)))) : (symbol _.0 _.1 _.2))))

(test-check "ino"
  (run 5 (q) (fresh (a b) (ino a b) (== q `(,a ,b))))
  '((_.0 (_.0 . _.1))
    ((_.0 (_.1 _.0 . _.2)) (=/= ((_.0 _.1))))
    ((_.0 (_.1 _.2 _.0 . _.3)) (=/= ((_.0 _.1)) ((_.0 _.2))))
    ((_.0 (_.1 _.2 _.3 _.0 . _.4))
     (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 _.3))))
    ((_.0 (_.1 _.2 _.3 _.4 _.0 . _.5))
     (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 _.3)) ((_.0 _.4))))))

(test-check "!ino"
  (run 5 (q) (fresh (a b) (!ino a b) (== q `(,a ,b))))
  '((_.0 ())
    ((_.0 (_.1)) (=/= ((_.0 _.1))))
    ((_.0 (_.1 _.2)) (=/= ((_.0 _.1)) ((_.0 _.2))))
    ((_.0 (_.1 _.2 _.3))
     (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 _.3))))
    ((_.0 (_.1 _.2 _.3 _.4))
     (=/= ((_.0 _.1)) ((_.0 _.2)) ((_.0 _.3)) ((_.0 _.4))))))

(test-check "flat-uniono"
  (run 10 (q) (fresh (a b c) (flat-uniono a b c) (== q `(,a ,b ,c))))
  '((() _.0 _.0) ((_.0) (_.0 . _.1) (_.0 . _.1)) ((_.0) () (_.0))
    (((_.0) (_.1 _.0 . _.2) (_.1 _.0 . _.2)) (=/= ((_.0 _.1))))
    (((_.0) (_.1) (_.0 _.1)) (=/= ((_.0 _.1))))
    ((_.0 _.1) () (_.0 _.1))
    (((_.0) (_.1 _.2 _.0 . _.3) (_.1 _.2 _.0 . _.3))
     (=/= ((_.0 _.1)) ((_.0 _.2))))
    ((_.0 _.0) (_.0 . _.1) (_.0 . _.1))
    (((_.0) (_.1 _.2) (_.0 _.1 _.2))
     (=/= ((_.0 _.1)) ((_.0 _.2))))
    ((_.0 _.1 _.2) () (_.0 _.1 _.2))))

(test-check "find a premise in the list"
  (let ((d (make-un-atom 'dirty))
        (c (make-un-atom 'cat))
        (t (make-constant 'Tom)))
    (run 1 (q) (!-o `(,d ,t) `((,d ,t)) q)))
  '(((-2 . dirty) (-1 . Tom))))

(test-check "doing a simple derivation"
  (let ((d (make-un-atom 'dirty))
        (c (make-un-atom 'cat))
        (t (make-constant 'Tom)))
    (run 1 (q) (!-o `(,d ,t) `((,c ,t) (4 ,c ,d)) q)))
  '(((((-2 . cat) (-1 . Tom)) (4 (-2 . cat) (-2 . dirty)))
     =>
     ((-2 . dirty) (-1 . Tom)))))

(test-check "rule 2"
  (let ((u (make-constant 'Ursula))
        (r (make-bin-atom 'relates))
        (c (make-un-atom 'cat))
        (t (make-constant 'Tom)))
    (run 1 (q) (!-o `(,r ,t ,u) `(((4 ,c ,r) ,t) (,c ,u)) q)))
  '(((((-2 . cat) (-1 . Ursula))
    ((4 (-2 . cat) (-3 . relates)) (-1 . Tom)))
   =>
   ((-3 . relates) (-1 . Tom) (-1 . Ursula)))))

(test-check "doing a rule 1 & 2 derivation"
  (let ((r (make-bin-atom 'raises))
        (c (make-un-atom 'cat))
        (d (make-un-atom 'dirty))
        (t (make-constant 'Tom))
        (u (make-constant 'Ursula)))
    (run 1 (q) (!-o `(,r ,t ,u) `((,c ,u) (4 ,c ,d) ((4 ,d ,r) ,t)) q)))
  '(((((((-2 . cat) (-1 . Ursula)) (4 (-2 . cat) (-2 . dirty)))
       =>
       ((-2 . dirty) (-1 . Ursula)))
      ((4 (-2 . dirty) (-3 . raises)) (-1 . Tom)))
     =>
     ((-3 . raises) (-1 . Tom) (-1 . Ursula)))))

(test-check "rule 3"
  (let ((t (make-constant 'Tom))
        (d (make-un-atom 'dirty))
        (c (make-un-atom 'cat)))
    (run 1 (q) (!-o `(3 ,c ,d) `((,c ,t) (,d ,t)) q)))
  '(((((-2 . cat) (-1 . Tom)) ((-2 . dirty) (-1 . Tom))) => (3 (-2 . cat) (-2 . dirty)))))

(test-check "rule 4"
  (let ((u (make-constant 'Ursula))
        (r (make-bin-atom 'relates))
        (c (make-un-atom 'cat))
        (t (make-constant 'Tom)))
    (run 1 (q) (!-o `((3 ,c ,r) ,t) `((,r ,t ,u) (,c ,u)) q)))
  '(((((-3 . relates) (-1 . Tom) (-1 . Ursula))
      ((-2 . cat) (-1 . Ursula)))
     =>
     ((3 (-2 . cat) (-3 . relates)) (-1 . Tom)))))

(test-check "rule 5"
  (let ((d (make-un-atom 'dirty))
        (f (make-un-atom 'feline))
        (c (make-un-atom 'cat)))
    (run 1 (q) (!-o `(4 ,c ,d) `((4 ,c ,f) (4 ,f ,d)) q)))  
  '((((((((((-2 . cat) (-4 . _.0))
           (4 (-2 . cat) (-2 . feline)))
          =>
          ((-2 . feline) (-4 . _.0)))
         (4 (-2 . feline) (-2 . dirty)))
        =>
        ((-2 . dirty) (-4 . _.0))))
      =>
      (4 (-2 . cat) (-2 . dirty)))
     : (symbol _.0))))

(test-check "rule 7"
  (let ((d (make-un-atom 'dirty))
        (d^ (negate-un-literal (make-un-atom 'dirty))))
    (run 1 (q) (!-o `(4 ,d ,d^) `((3 ,d ,d^)) q)))
  '(((((3 (-2 . dirty) (not (-2 . dirty)))
       ((((not (-2 . dirty)) (-4 . _.0)))
        =>
        (4 (-2 . dirty) (not (-2 . dirty)))))
      =>
      (4 (-2 . dirty) (not (-2 . dirty))))
     : (symbol _.0))))

(test-check "rules 9 & 10"
  (let ((c (make-un-atom 'cat))
        (d (make-un-atom 'dirty))
        (t (make-constant 'Tom)))
    (let ((c-not (negate-un-literal c)))
      (run 1 (q) (!-o `(,d ,t) `((,c ,t) (,c-not ,t)) q))))
  '((((((((((-2 . cat) (-1 . Tom))
           ((not (-2 . cat)) (-1 . Tom)))
          =>
          (3 (-2 . cat) (not (-2 . cat))))
         ((((-2 . cat) (-4 . _.0)) ((not (-2 . cat)) (-4 . _.0)))
          =>
          (0 . 0)))
        =>
        (0 . 0)))
      =>
      ((-2 . dirty) (-1 . Tom)))
     : (symbol _.0))))

(test-check "doing a double derivation"
  (let ((d (make-un-atom 'dirty))
        (c (make-un-atom 'cat))
        (t (make-constant 'Tom))
        (a (make-un-atom 'aristocat)))
    (run 1 (q) (!-o `(,d ,t) `((,a ,t) (4 ,c ,d) (4 ,a ,c)) q)))
  '(((((((-2 . aristocat) (-1 . Tom))
        (4 (-2 . aristocat) (-2 . cat)))
       =>
       ((-2 . cat) (-1 . Tom)))
      (4 (-2 . cat) (-2 . dirty)))
     =>
     ((-2 . dirty) (-1 . Tom)))))

(test-check "generate 10 quasi-complicated proofs"
  (run 10 (q) 
       (fresh (a b c d e f g h i j) 
         (== `(,a (,b ,c ,d ,e) ((((,i ,j) => ,f) ,g) => ,h)) q)
         (!-o a `(,b ,c ,d ,e) `((((,i ,j) => ,f) ,g) => ,h))
         (sentenceo a)
         (all-sentenceo `(,b ,c ,d ,e))))
  '(((((-2 . _.0) (-1 . _.1))
      (((-2 . _.2) (-1 . _.1))
       (4 (-2 . _.2) (-2 . _.3))
       (4 (-2 . _.3) (-2 . _.0))
       (3 (-2 . _.4) (-2 . _.5)))
      ((((((-2 . _.2) (-1 . _.1)) (4 (-2 . _.2) (-2 . _.3)))
         =>
         ((-2 . _.3) (-1 . _.1)))
        (4 (-2 . _.3) (-2 . _.0)))
       =>
       ((-2 . _.0) (-1 . _.1))))
     (=/= ((_.0 _.2)) ((_.2 _.3)))
     : (symbol _.0 _.1 _.2 _.3 _.4 _.5))
    ((((-2 . _.0) (-1 . _.1))
      (((-2 . _.2) (-1 . _.1))
       (4 (-2 . _.2) (-2 . _.3))
       (4 (-2 . _.3) (-2 . _.0))
       (3 (-2 . _.4) (not (-2 . _.5))))
      ((((((-2 . _.2) (-1 . _.1)) (4 (-2 . _.2) (-2 . _.3)))
         =>
         ((-2 . _.3) (-1 . _.1)))
        (4 (-2 . _.3) (-2 . _.0)))
       =>
       ((-2 . _.0) (-1 . _.1))))
     (=/= ((_.0 _.2)) ((_.2 _.3)))
     : (symbol _.0 _.1 _.2 _.3 _.4 _.5))
    ((((-2 . _.0) (-1 . _.1))
      (((-2 . _.2) (-1 . _.1))
       (4 (-2 . _.2) (-2 . _.3))
       (4 (-2 . _.3) (-2 . _.0))
       ((-3 . _.4) (-1 . _.5) (-1 . _.6)))
      ((((((-2 . _.2) (-1 . _.1)) (4 (-2 . _.2) (-2 . _.3)))
         =>
         ((-2 . _.3) (-1 . _.1)))
        (4 (-2 . _.3) (-2 . _.0)))
       =>
       ((-2 . _.0) (-1 . _.1))))
     (=/= ((_.0 _.2)) ((_.2 _.3)))
     : (symbol _.0 _.1 _.2 _.3 _.4 _.5 _.6))
    ((((-2 . _.0) (-1 . _.1))
      (((-2 . _.2) (-1 . _.1))
       (4 (-2 . _.2) (-2 . _.3))
       (4 (-2 . _.3) (-2 . _.0))
       ((-2 . _.4) (-1 . _.5)))
      ((((((-2 . _.2) (-1 . _.1)) (4 (-2 . _.2) (-2 . _.3)))
         =>
         ((-2 . _.3) (-1 . _.1)))
        (4 (-2 . _.3) (-2 . _.0)))
       =>
       ((-2 . _.0) (-1 . _.1))))
     (=/= ((_.0 _.2))
          ((_.0 _.4) (_.1 _.5))
          ((_.1 _.5) (_.3 _.4))
          ((_.2 _.3)))
     : (symbol _.0 _.1 _.2 _.3 _.4 _.5))
    ((((-2 . _.0) (-1 . _.1))
      (((-2 . _.2) (-1 . _.1))
       (4 (-2 . _.2) (-2 . _.3))
       (4 (-2 . _.3) (-2 . _.0))
       (3 (not (-2 . _.4)) (-2 . _.5)))
      ((((((-2 . _.2) (-1 . _.1)) (4 (-2 . _.2) (-2 . _.3)))
         =>
         ((-2 . _.3) (-1 . _.1)))
        (4 (-2 . _.3) (-2 . _.0)))
       =>
       ((-2 . _.0) (-1 . _.1))))
     (=/= ((_.0 _.2)) ((_.2 _.3)))
     : (symbol _.0 _.1 _.2 _.3 _.4 _.5))
    ((((-2 . _.0) (-1 . _.1))
      (((-2 . _.2) (-1 . _.1))
       (4 (-2 . _.2) (-2 . _.3))
       (4 (-2 . _.3) (-2 . _.0))
       ((not (-3 . _.4)) (-1 . _.5) (-1 . _.6)))
      ((((((-2 . _.2) (-1 . _.1)) (4 (-2 . _.2) (-2 . _.3)))
         =>
         ((-2 . _.3) (-1 . _.1)))
        (4 (-2 . _.3) (-2 . _.0)))
       =>
       ((-2 . _.0) (-1 . _.1))))
     (=/= ((_.0 _.2)) ((_.2 _.3)))
     : (symbol _.0 _.1 _.2 _.3 _.4 _.5 _.6))
    ((((-2 . _.0) (-1 . _.1))
      (((-2 . _.2) (-1 . _.1))
       (4 (-2 . _.2) (-2 . _.3))
       (4 (-2 . _.3) (-2 . _.0))
       (4 (-2 . _.4) (-2 . _.5)))
      ((((((-2 . _.2) (-1 . _.1)) (4 (-2 . _.2) (-2 . _.3)))
         =>
         ((-2 . _.3) (-1 . _.1)))
        (4 (-2 . _.3) (-2 . _.0)))
       =>
       ((-2 . _.0) (-1 . _.1))))
     (=/= ((_.0 _.2)) ((_.2 _.3)))
     : (symbol _.0 _.1 _.2 _.3 _.4 _.5))
    ((((-2 . _.0) (-1 . _.1))
      (((-2 . _.2) (-1 . _.1))
       (4 (-2 . _.2) (-2 . _.3))
       (4 (-2 . _.3) (-2 . _.0))
       ((not (-2 . _.4)) (-1 . _.5)))
      ((((((-2 . _.2) (-1 . _.1)) (4 (-2 . _.2) (-2 . _.3)))
         =>
         ((-2 . _.3) (-1 . _.1)))
        (4 (-2 . _.3) (-2 . _.0)))
       =>
       ((-2 . _.0) (-1 . _.1))))
     (=/= ((_.0 _.2)) ((_.2 _.3)))
     : (symbol _.0 _.1 _.2 _.3 _.4 _.5))
    ((((-2 . _.0) (-1 . _.1))
      (((-2 . _.2) (-1 . _.1))
       (4 (-2 . _.2) (-2 . _.3))
       (4 (-2 . _.3) (-2 . _.0))
       (3 (not (-2 . _.4)) (not (-2 . _.5))))
      ((((((-2 . _.2) (-1 . _.1)) (4 (-2 . _.2) (-2 . _.3)))
         =>
         ((-2 . _.3) (-1 . _.1)))
        (4 (-2 . _.3) (-2 . _.0)))
       =>
       ((-2 . _.0) (-1 . _.1))))
     (=/= ((_.0 _.2)) ((_.2 _.3)))
     : (symbol _.0 _.1 _.2 _.3 _.4 _.5))
    ((((-2 . _.0) (-1 . _.1))
      (((-2 . _.2) (-1 . _.1))
       (4 (-2 . _.2) (-2 . _.3))
       (4 (-2 . _.3) (-2 . _.0))
       (4 (-2 . _.4) (not (-2 . _.5))))
      ((((((-2 . _.2) (-1 . _.1)) (4 (-2 . _.2) (-2 . _.3)))
         =>
         ((-2 . _.3) (-1 . _.1)))
        (4 (-2 . _.3) (-2 . _.0)))
       =>
       ((-2 . _.0) (-1 . _.1))))
     (=/= ((_.0 _.2)) ((_.2 _.3)))
     : (symbol _.0 _.1 _.2 _.3 _.4 _.5))))

(test-check "thirteen generated proofs"
  (run 13 (q) (fresh (a b c) (all-sentenceo b) (!-o a b c) (== `(,a ,b ,c) q) (sentenceo a)))
  '((((3 (-2 . _.0) (-2 . _.1))
    ((3 (-2 . _.0) (-2 . _.1)))
    (3 (-2 . _.0) (-2 . _.1)))
   : (symbol _.0 _.1))
  (((3 (-2 . _.0) (not (-2 . _.1)))
     ((3 (-2 . _.0) (not (-2 . _.1))))
     (3 (-2 . _.0) (not (-2 . _.1))))
    : (symbol _.0 _.1))
  ((((-3 . _.0) (-1 . _.1) (-1 . _.2))
     (((-3 . _.0) (-1 . _.1) (-1 . _.2)))
     ((-3 . _.0) (-1 . _.1) (-1 . _.2)))
    : (symbol _.0 _.1 _.2))
  (((3 (-2 . _.0) (-2 . _.1))
     ((3 (-2 . _.0) (-2 . _.1)) (3 (-2 . _.2) (-2 . _.3)))
     (3 (-2 . _.0) (-2 . _.1)))
    : (symbol _.0 _.1 _.2 _.3))
  (((3 (-2 . _.0) (-2 . _.1))
     ((3 (-2 . _.2) (-2 . _.3)) (3 (-2 . _.0) (-2 . _.1)))
     (3 (-2 . _.0) (-2 . _.1)))
    (=/= ((_.0 _.2) (_.1 _.3)))
    : (symbol _.0 _.1 _.2 _.3))
  (((4 (-2 . _.0) (-2 . _.0))
     ()
     ((((-2 . _.0) (-4 . _.1))) => (4 (-2 . _.0) (-2 . _.0))))
    : (symbol _.0 _.1))
  (((3 (-2 . _.0) (-2 . _.1))
     ((3 (-2 . _.0) (-2 . _.1)) (3 (-2 . _.2) (not (-2 . _.3))))
     (3 (-2 . _.0) (-2 . _.1)))
    : (symbol _.0 _.1 _.2 _.3))
  (((3 (-2 . _.0) (not (-2 . _.1)))
     ((3 (-2 . _.2) (-2 . _.3)) (3 (-2 . _.0) (not (-2 . _.1))))
     (3 (-2 . _.0) (not (-2 . _.1))))
    : (symbol _.0 _.1 _.2 _.3))
  ((((-2 . _.0) (-1 . _.1))
     (((-2 . _.0) (-1 . _.1)))
     ((-2 . _.0) (-1 . _.1)))
    : (symbol _.0 _.1))
  (((4 (-2 . _.0) (-2 . _.0))
     ((3 (-2 . _.1) (-2 . _.2)))
     ((((-2 . _.0) (-4 . _.3))) => (4 (-2 . _.0) (-2 . _.0))))
    : (symbol _.0 _.1 _.2 _.3))
  (((4 (-2 . _.0) (-2 . _.0))
     ((3 (-2 . _.1) (not (-2 . _.2))))
     ((((-2 . _.0) (-4 . _.3))) => (4 (-2 . _.0) (-2 . _.0))))
    : (symbol _.0 _.1 _.2 _.3))
  (((3 (-2 . _.0) (not (-2 . _.1)))
     ((3 (-2 . _.0) (not (-2 . _.1))) (3 (-2 . _.2) (-2 . _.3)))
     (3 (-2 . _.0) (not (-2 . _.1))))
    : (symbol _.0 _.1 _.2 _.3))
  (((3 (-2 . _.0) (-2 . _.1))
     ((3 (-2 . _.2) (not (-2 . _.3))) (3 (-2 . _.0) (-2 . _.1)))
     (3 (-2 . _.0) (-2 . _.1)))
    : (symbol _.0 _.1 _.2 _.3))))

(test-check "Run 5, with an actual derivation, no helpsies"
  (run 5 (q) 
       (fresh (a b c d)
         (== `(,a ,b (,c => ,d)) q)
         (!-o a b `(,c => ,d))
         (sentenceo a)
         (all-sentenceo b)))
  '((((4 (-2 . _.0) (-2 . _.0))
    ()
    ((((-2 . _.0) (-4 . _.1))) => (4 (-2 . _.0) (-2 . _.0))))
   : (symbol _.0 _.1))
  ((((-2 . _.0) (-1 . _.1))
     (((-2 . _.2) (-1 . _.1)) (4 (-2 . _.2) (-2 . _.0)))
     ((((-2 . _.2) (-1 . _.1)) (4 (-2 . _.2) (-2 . _.0)))
       =>
       ((-2 . _.0) (-1 . _.1))))
    (=/= ((_.0 _.2)))
    : (symbol _.0 _.1 _.2))
  (((3 (-2 . _.0) (-2 . _.0))
     (((-2 . _.0) (-1 . _.1)))
     ((((-2 . _.0) (-1 . _.1)) ((-2 . _.0) (-1 . _.1)))
       =>
       (3 (-2 . _.0) (-2 . _.0))))
    : (symbol _.0 _.1))
  ((((-2 . _.0) (-1 . _.1))
     ((4 (-2 . _.2) (-2 . _.0)) ((-2 . _.2) (-1 . _.1)))
     ((((-2 . _.2) (-1 . _.1)) (4 (-2 . _.2) (-2 . _.0)))
       =>
       ((-2 . _.0) (-1 . _.1))))
    (=/= ((_.0 _.2)))
    : (symbol _.0 _.1 _.2))
  (((4 (-2 . _.0) (-2 . _.0))
     ((3 (-2 . _.1) (-2 . _.2)))
     ((((-2 . _.0) (-4 . _.3))) => (4 (-2 . _.0) (-2 . _.0))))
    : (symbol _.0 _.1 _.2 _.3))))
